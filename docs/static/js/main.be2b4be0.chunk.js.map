{"version":3,"sources":["App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["api_url","App","React","value","setValue","key","String","items","setItems","isLoaded","setIsLoaded","isClicked","setIsClicked","isOpen","setIsOpen","a","fetch","method","mode","then","response","json","data","theme","textAlign","marginTop","fontSize","margin","as","hidden","onClick","itemAlign","marginRight","marginLeft","Object","keys","result","map","positive","negative","colorScheme","isLoading","isDisabled","alignItems","onChange","event","target","placeholder","children","loadingText","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be2b4be0.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  ChakraProvider,\n  Heading,\n  Input,\n  InputGroup,\n  InputRightAddon,\n  Stack,\n  Button,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n  Table,\n} from \"@chakra-ui/react\"\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\n\nconst api_url: string = \"http://localhost:8000/api/word_calc/\"\n\n//async function Api(value:string) {\n//  const result = await fetch(api_url + value + \"/?format=json\", {\n//    method: \"GET\",\n//    mode: 'no-cors'\n//  })\n//  return result.json()\n//}\n\n//export function App() {\n//  const [value, setValue] = React.useState(\"\")\n//  const [isLoaded, setIsLoaded] = React.useState(false)\n//  const [api_result, setApi_result] = React.useState([])\n//  const [clicked, setCliked] = React.useState(false)\n//  const handleChange = (event: any) => setValue(event.target.value)\n//  const handleClick = () => setCliked(true)\n  //Api(value)\n  //.then(data => {\n  //  console.log(data); // `data.json()` の呼び出しで解釈された JSON データ\n  //});\n//  return (\n//    <ChakraProvider theme={theme}>\n//      <Heading as='h1'>Word2Vec</Heading>\n//        <InputGroup>\n//          <Input\n//            value={value}\n//            onChange={handleChange}\n//            placeholder=\"王様-男性+女性\"\n//          />\n//          <InputRightAddon children=\"=\" />\n//        </InputGroup>\n//        <Button\n//          type=\"submit\"\n//          onClick={handleClick}\n//        >\n//          submit\n//        </Button>\n//    </ChakraProvider>\n//  )\n//}\n\nexport function App() {\n  const [value, setValue] = React.useState(\"\")\n  const [items, setItems] = React.useState({key: String})\n  const [isLoaded, setIsLoaded] = React.useState(false)\n  const [isClicked, setIsClicked] = React.useState(false)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const handleChange = (event: any) => setValue(event.target.value)\n  //const handleClick = () => setIsClicked(true)\n  //const handleClickReturn = () => setIsClicked(false)\n  async function handleClick() {\n    //if (!value) {\n    //  return 0\n    //}\n    setIsClicked(true)\n    //fetch(api_url + value + \"/\", {\n    //  method: 'GET',\n    //  mode: 'cors'\n    //})\n    //.then(response => response.json())\n    //.then(data => {\n    //  setItems(data)\n    //  setIsLoaded(true)\n    //})\n    const data = await fetch(api_url + value + \"/\", {\n      method: 'GET',\n      mode: 'cors'\n    })\n    .then(response => response.json())\n    //.catch(() => console.log(\"Error\"))\n    setItems(data)\n    setIsLoaded(true)\n  }\n  function handleClickReturn() {\n    setIsClicked(false)\n    setIsLoaded(false)\n    setIsOpen(false)\n    setItems({key: String})\n  }\n  if (isClicked && isLoaded) {\n    return (\n      <ChakraProvider theme={theme}>\n        <Box textAlign=\"center\" marginTop=\"5%\">\n          <Text fontSize=\"2xl\">{value} = </Text>\n          <Heading margin=\"20px\" as=\"h1\" hidden={!items[\"result\"][\"1\"]}>Answer: {items[\"result\"][\"1\"]}</Heading>\n          <Heading as=\"h1\" hidden={!items[\"result\"][\"Error\"]}>Error:{items[\"result\"][\"Error\"]}</Heading>\n          <Heading as=\"h1\" hidden={items[\"result\"][\"1\"]||items[\"result\"][\"Error\"]}>Unexpected Ezrror</Heading>\n          <Button margin=\"10px\" hidden={isOpen} onClick={() => setIsOpen(true)}>Learn more</Button>\n          <Button margin=\"10px\" hidden={!isOpen} onClick={() => setIsOpen(false)}>Hide</Button>\n          <Box hidden={!isOpen} itemAlign=\"center\" marginRight=\"auto\" marginLeft=\"auto\">\n            <Table marginLeft=\"auto\" marginRight=\"auto\" marginTop=\"10px\">\n              {Object.keys(items.result).map(key => (\n                <tr>\n                  <td>\n                    {key}\n                  </td>\n                  <td>\n                    {items.result[key]}\n                  </td>\n                </tr>\n              ))}\n            </Table>\n            <Text margin=\"10px\">positive: \"\n              {Object.keys(items.positive).map(key => (\n                <span>\n                {items.positive[key]},\n                </span>\n              ))}\n            \"</Text>\n            <Text margin=\"10px\">negative: \"\n              {Object.keys(items.negative).map(key => (\n                <span>\n                {items.negative[key]},\n                </span>\n              ))}\n            \"</Text>\n          </Box>\n          <Button margin=\"10px\" colorScheme=\"red\" onClick={handleClickReturn}>Return</Button>\n        </Box>\n      </ChakraProvider>\n      )\n  }\n  else {\n    let isLoading: boolean = false\n    let isDisabled: boolean = false\n    if (isClicked) {\n      isLoading = true\n    }\n    if (!value) {\n      isDisabled = true\n    }\n    return (\n      <ChakraProvider theme={theme}>\n        <Heading as=\"h1\" textAlign=\"center\" margin=\"50px\" marginTop=\"10%\">Word2Vec</Heading>\n        <Box marginLeft=\"10%\" marginRight=\"10%\" alignItems=\"center\" textAlign=\"center\">\n          <Text>\n            単語の計算をすることができます。計算式を入力して送信して下さい。<br/>You can calculate words. Please enter the formula and send.\n          </Text>\n          <InputGroup margin=\"10px\">\n            <Input\n              value={value}\n              onChange={handleChange}\n              placeholder=\"例) 王様-男性+女性\"\n              isDisabled={isLoading}\n            />\n            <InputRightAddon children=\"=\" />\n          </InputGroup>\n          <Button\n            isDisabled={isDisabled}\n            isLoading={isLoading}\n            loadingText=\"Loading ...\"\n            colorScheme=\"teal\"\n            type=\"submit\"\n            onClick={handleClick}\n          >\n              Submit\n          </Button>\n        </Box>\n        \n      </ChakraProvider>\n    )\n  }\n}","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}