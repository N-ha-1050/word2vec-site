{"version":3,"sources":["App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["api_url","process","App","React","value","setValue","Error","items","setItems","isLoaded","setIsLoaded","isClicked","setIsClicked","isOpen","setIsOpen","isAbout","setIsAbout","a","fetch","method","mode","then","response","json","data","theme","w","display","justifyContent","alignItems","flexDirection","alignContent","m","fontSize","as","hidden","color","borderRadius","p","border","Boolean","onClick","marginTop","variant","width","minW","Object","keys","result","map","key","margin","positive","Number","negative","colorScheme","justify","align","direction","mt","href","isLoading","isDisabled","h","mx","maxW","onChange","event","target","placeholder","isRequired","children","spacing","loadingText","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae45049a.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  ChakraProvider,\n  Heading,\n  Input,\n  InputGroup,\n  InputRightAddon,\n  Button,\n  Box,\n  Text,\n  theme,\n  Table,\n  Tr,\n  Td,\n  Flex,\n  Link,\n  Stack,\n  ListItem,\n  UnorderedList,\n} from \"@chakra-ui/react\"\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\nimport { type } from \"os\"\nimport { FaTheaterMasks } from \"react-icons/fa\"\n\nconst api_url = process.env.REACT_APP_API_URL\n\n//async function Api(value:string) {\n//  const result = await fetch(api_url + value + \"/?format=json\", {\n//    method: \"GET\",\n//    mode: 'no-cors'\n//  })\n//  return result.json()\n//}\n\n//export function App() {\n//  const [value, setValue] = React.useState(\"\")\n//  const [isLoaded, setIsLoaded] = React.useState(false)\n//  const [api_result, setApi_result] = React.useState([])\n//  const [clicked, setCliked] = React.useState(false)\n//  const handleChange = (event: any) => setValue(event.target.value)\n//  const handleClick = () => setCliked(true)\n  //Api(value)\n  //.then(data => {\n  //  console.log(data); // `data.json()` の呼び出しで解釈された JSON データ\n  //});\n//  return (\n//    <ChakraProvider theme={theme}>\n//      <Heading as='h1'>Word2Vec</Heading>\n//        <InputGroup>\n//          <Input\n//            value={value}\n//            onChange={handleChange}\n//            placeholder=\"王様-男性+女性\"\n//          />\n//          <InputRightAddon children=\"=\" />\n//        </InputGroup>\n//        <Button\n//          type=\"submit\"\n//          onClick={handleClick}\n//        >\n//          submit\n//        </Button>\n//    </ChakraProvider>\n//  )\n//}\n\nexport function App() {\n  const [value, setValue] = React.useState(\"\")\n  type Result = {\n    \"1\":string,\n    \"2\":string,\n    \"3\":string,\n    \"4\":string,\n    \"5\":string,\n    \"6\":string,\n    \"7\":string,\n    \"8\":string,\n    \"9\":string,\n    \"10\":string,\n    \"Error\":string,\n  }\n  const [items, setItems] = React.useState({\n    \"positive\": [],\n    \"negative\": [],\n    \"result\": {\n        1: \"\",\n        2: \"\",\n        3: \"\",\n        4: \"\",\n        5: \"\",\n        6: \"\",\n        7: \"\",\n        8: \"\",\n        9: \"\",\n        10: \"\",\n        Error: \"\",\n    }\n  })\n  const [isLoaded, setIsLoaded] = React.useState(false)\n  const [isClicked, setIsClicked] = React.useState(false)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [isAbout, setIsAbout] = React.useState(false)\n  const handleChange = (event: any) => setValue(event.target.value)\n  //const handleClick = () => setIsClicked(true)\n  //const handleClickReturn = () => setIsClicked(false)\n  async function handleClick() {\n    //if (!value) {\n    //  return 0\n    //}\n    setIsClicked(true)\n    //fetch(api_url + value + \"/\", {\n    //  method: 'GET',\n    //  mode: 'cors'\n    //})\n    //.then(response => response.json())\n    //.then(data => {\n    //  setItems(data)\n    //  setIsLoaded(true)\n    //})\n    const data = await fetch(api_url + value + \"/\", {\n      method: 'GET',\n      mode: 'cors'\n    })\n    .then(response => response.json())\n    //.catch(() => console.log(\"Error\"))\n    setItems(data)\n    setIsLoaded(true)\n  }\n  function handleClickReturn() {\n    setIsClicked(false)\n    setIsLoaded(false)\n    setIsOpen(false)\n    //setItems({key: String})\n  }\n  if (isClicked && isLoaded) {\n    return (\n      <ChakraProvider theme={theme}>\n      <Box w=\"90%\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" alignContent=\"center\" m=\"5%\">\n          <Text fontSize=\"2xl\">{value} = </Text>\n          <Heading m=\"20px\" as=\"h1\" hidden={!items[\"result\"][\"1\"]}>Answer: {items[\"result\"][\"1\"]}</Heading>\n          <Heading m=\"20px\" as=\"h1\" hidden={!items[\"result\"][\"Error\"]} color=\"darkred\" borderRadius=\"5px\" p=\"5px\" border=\"solid\">Error</Heading>\n          <Heading m=\"20px\" as=\"h1\" hidden={Boolean(items[\"result\"][\"1\"]) || Boolean(items[\"result\"][\"Error\"])} color=\"purple\" borderRadius=\"5px\" p=\"5px\" border=\"solid\">Unexpected Error</Heading>\n          <Button m=\"10px\" hidden={isOpen} onClick={() => setIsOpen(true)}>Learn more</Button>\n          <Button m=\"10px\" hidden={!isOpen} onClick={() => setIsOpen(false)}>Hide</Button>\n          <Table hidden={!isOpen} marginTop=\"10px\" variant=\"simple\" width=\"fit-content\" minW=\"25%\">\n            {(Object.keys(items.result) as (keyof Result)[]).map(key => (\n              <Tr>\n                <Td color={(key===\"1\")?\"gold\":(key===\"2\")?\"silver\":(key===\"3\")?\"Brown\":\"\"}>\n                  {key}\n                </Td>\n                <Td>\n                  {items[\"result\"][key]}\n                </Td>\n              </Tr>\n            ))}\n          </Table>\n          <Box hidden={!isOpen} marginTop=\"10px\">\n            <Text margin=\"10px\">positive: \"\n              {Object.keys(items.positive).map(key => (\n                <span>\n                {items.positive[Number(key)]},\n                </span>\n              ))}\n            \"</Text>\n            <Text margin=\"10px\">negative: \"\n              {Object.keys(items.negative).map(key => (\n                <span>\n                {items.negative[Number(key)]},\n                </span>\n              ))}\n            \"</Text>\n            </Box>\n          <Button m=\"10px\" colorScheme=\"red\" onClick={handleClickReturn}>Return</Button>\n        </Box>\n      </ChakraProvider>\n      )\n  }\n  else if (isAbout) {\n    return (\n      <ChakraProvider theme={theme}>\n        <Flex w=\"90%\" justify=\"center\" align=\"center\" direction=\"column\" m=\"5%\">\n          <Heading as=\"h1\">About</Heading>\n          <Text>This site is ...</Text>\n          <Heading as=\"h2\" mt=\"50px\">How This Site Works</Heading>\n          <Text mt=\"25px\">How to →<Link href=\"https://www.notion.so/word2vec-981b392227f347ecb579a5116ad5f9b7\">My Notion</Link></Text>\n          <Heading as=\"h2\" mt=\"50px\">Reference Site</Heading>\n          <UnorderedList>\n          <ListItem><Link href=\"https://www.youtube.com/watch?v=sK3HqLwag_w\">単語を数値化して遊んでみた - YouTube</Link></ListItem>\n          <ListItem><Link href=\"https://qiita.com/Blaster36/items/84b1af5802f150017d84\">Pythonプログラミング：ウィキペディアのデータを使ってword2vecをしてみる｛1. データ取得＆前処理編｝ - Qiita</Link></ListItem>\n          <ListItem><Link href=\"https://swdrsker.hatenablog.com/entry/2017/02/23/193137\">word2vecで「単語の足し算引き算」をしてみる - 技術メモ</Link></ListItem>\n          </UnorderedList>\n          <Button\n            m=\"20px\"\n            onClick={() => setIsAbout(false)}\n            colorScheme=\"red\"\n          >\n            Return\n          </Button>\n        </Flex>\n      </ChakraProvider>\n    )\n  }\n  else {\n    let isLoading: boolean = false\n    let isDisabled: boolean = false\n    if (isClicked) {\n      isLoading = true\n    }\n    if (!value) {\n      isDisabled = true\n    }\n    return (\n      <ChakraProvider theme={theme}>\n        <Flex w=\"90%\" h=\"100vh\" justify=\"center\" align=\"center\" direction=\"column\" mx=\"5%\">\n          <Heading as=\"h1\">Word2Vec</Heading>\n          <Text m=\"25px\">\n            単語の計算をすることができます。計算式を入力して送信して下さい。<br/>You can calculate words. Please enter the formula and send.\n          </Text>\n          <InputGroup m=\"20px\" maxW=\"1000px\">\n            <Input\n              value={value}\n              onChange={handleChange}\n              placeholder=\"例) 王様-男性+女性\"\n              isDisabled={isLoading}\n              isRequired\n            />\n            <InputRightAddon children=\"=\" />\n          </InputGroup>\n          <Stack direction={[\"column\", \"row\"]} spacing=\"20px\">\n          <Button\n            isDisabled={isDisabled}\n            isLoading={isLoading}\n            loadingText=\"Loading ...\"\n            colorScheme=\"teal\"\n            type=\"submit\"\n            onClick={handleClick}\n          >\n            Submit\n          </Button>\n          {/*\n          <Button\n            onClick={() => setIsAbout(true)}\n          >\n            About\n          </Button>\n          */}\n          </Stack>\n        </Flex>\n      </ChakraProvider>\n    )\n  }\n}","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}